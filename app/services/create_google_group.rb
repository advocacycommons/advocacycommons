require 'google/apis/admin_directory_v1'
require 'google/apis/groupssettings_v1'

class CreateGoogleGroup
  class << self
    def call(organizer: , group:)
      network = group.primary_network

      authorization = get_authorization(network)

      directory_service = build_directory_service(authorization)

      google_group = create_google_group(directory_service, network.google_gsuite_email_base, group.name)

      update_google_group_settings(authorization, google_group)

      add_member_to_google_group(directory_service, google_group, organizer.email)
    end

    private

    def get_authorization(network)
      authorizer = Google::Auth::ServiceAccountCredentials.make_creds(
        json_key_io: File.open(network.google_gsuite_key),
        scope: auth_scopes,
        sub: network.google_gsuite_admin_email
      )
      
      authorizer.sub = network.google_gsuite_admin_email
      authorizer
    end

    def build_directory_service(authorization)
      directory_service = Google::Apis::AdminDirectoryV1::DirectoryService.new
      directory_service.authorization = authorization

      directory_service
    end

    def create_google_group(directory_service, google_gsuite_email_base, group_name)
      slugified_group_name = group_name.downcase.split.join('-')
      group = Google::Apis::AdminDirectoryV1::Group.new(
        email: "#{slugified_group_name}#{google_gsuite_email_base}",
        name: group_name,
        description: "This is a Google Group generated by Affinity.works"
      )

      directory_service.insert_group(group)
    end

    def update_google_group_settings(authorization, google_group)
      group_settings = Google::Apis::GroupssettingsV1::Groups.new(allow_external_members: "true", is_archived: "true")
      settings_service = Google::Apis::GroupssettingsV1::GroupssettingsService.new
      settings_service.authorization = authorization

      settings_service.update_group(google_group.email, group_settings)
    end

    def add_member_to_google_group(directory_service, group, email)
      member = Google::Apis::AdminDirectoryV1::Member.new(email: email, role: "OWNER")

      directory_service.insert_member(group.id, member)
    end

    def auth_scopes
      [
        'https://www.googleapis.com/auth/admin.directory.group',
        'https://www.googleapis.com/auth/admin.directory.group.member',
        'https://www.googleapis.com/auth/apps.groups.settings'
      ]
    end
  end
end